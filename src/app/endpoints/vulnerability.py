from typing import Dict

from fastapi import APIRouter, Depends, HTTPException

from app.business_objects.repositories import EntityAdapter
from app.business_objects.repositories.vulnerability import inject_vulnerabilities, Vulnerabilities
from app.business_objects.operations.vulnerabilities import BulkTransitionVulnerabilitiesBasedOnJiraIDs, \
    GetStatusBasedOnMatchesFromJiraQuery
from app.models import Vulnerability
from app.models.vulnerability_operations import VulnerabilityJiraIssueList, BulkTransitionResponseBasedOnJiraIDs

router = APIRouter()


# =========================================================
# GET VULNERABILITY BY ID
# =========================================================
@router.get(
    '/vulnerability/{vulnerability_id}',
    response_model=Vulnerability
)
def get_vulnerability_by_id(
        vulnerability_id: str,
        vulnerabilities: Vulnerabilities =
        Depends(inject_vulnerabilities)
) -> Vulnerability:
    vulnerability_raw = vulnerabilities.get_by_id(vulnerability_id)
    if vulnerability_raw:
        transformed = EntityAdapter(
            destination_model=Vulnerability(),
            raw_data=vulnerability_raw
        ).transformed
        return Vulnerability(**transformed)
    else:
        raise HTTPException(status_code=404)


# =========================================================
# UPDATE MULTIPLE BY JIRA IDS
# =========================================================
@router.put(
    "/vulnerabilities/status",
    response_model=BulkTransitionResponseBasedOnJiraIDs
)
def update_vulnerability_status_based_on_jira_ids(
        references: VulnerabilityJiraIssueList,
        vulnerabilities: Vulnerabilities =
        Depends(inject_vulnerabilities)
):
    return BulkTransitionVulnerabilitiesBasedOnJiraIDs(
        issues=references,
        vulnerabilities=vulnerabilities
    ).operation_result


# =========================================================
# GET VULNERABILITY STATUS BY JIRA IDS
# =========================================================
@router.post(
    "/vulnerabilities/status",
    response_model=Dict
)
def get_vulnerability_status_by_jira_ids(
        references: VulnerabilityJiraIssueList,
        vulnerabilities: Vulnerabilities =
        Depends(inject_vulnerabilities)
):
    return GetStatusBasedOnMatchesFromJiraQuery(
        issues=references,
        vulnerabilities=vulnerabilities
    ).operation_result
